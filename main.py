#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.0a9 on Fri Oct 30 11:20:58 2020
#

import wx

# begin wxGlade: dependencies
import wx.adv
import wx.grid
# end wxGlade

# begin wxGlade: extracode
import sys
sys.path.append('./scripts/')
import os
import wx.adv
import wx.html
import wx.xml
import shutil
import pyperclip
import subprocess
import wx.lib.mixins.listctrl as listmix
from scripts import*
# end wxGlade


class MyApp(wx.App):
    def OnInit(self):
        self.welcomepage = WelcomePage(None, wx.ID_ANY, "")
        self.SetTopWindow(self.welcomepage)
        self.welcomepage.Show()
        return True
# end of class MyApp


###------ Paper ------###
class RegisterPaper(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: RegisterPaper.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((680, 549))
        self.SetTitle("rpos : Register Paper")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_10, 5, wx.EXPAND, 0)

        label_1 = wx.StaticText(self.panel_1, wx.ID_ANY, "BibTex")
        label_1.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_10.Add(label_1, 0, wx.ALL, 3)

        self.bibtex_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.bibtex_txt.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_10.Add(self.bibtex_txt, 12, wx.ALL | wx.EXPAND, 2)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_4, 1, wx.EXPAND, 0)

        description_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"詳細")
        description_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_4.Add(description_lbl, 3, wx.ALL, 2)

        self.description_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.description_txt.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_4.Add(self.description_txt, 12, wx.ALL | wx.EXPAND, 2)

        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_11, 1, wx.EXPAND, 0)

        fileBibtex_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"ファイル", style=wx.ALIGN_CENTER_HORIZONTAL)
        fileBibtex_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(fileBibtex_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.fileBibtex_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.fileBibtex_txt.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(self.fileBibtex_txt, 15, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.fileselect_btn = wx.Button(self.panel_1, wx.ID_ANY, u"選択")
        self.fileselect_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(self.fileselect_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 1)

        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_12, 1, wx.EXPAND, 0)

        doi_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, "DOI", style=wx.ALIGN_CENTER_HORIZONTAL)
        doi_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_12.Add(doi_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.doi_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.doi_txt.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_12.Add(self.doi_txt, 16, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_5, 1, wx.EXPAND, 0)

        self.isread_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"調査")
        self.isread_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_5.Add(self.isread_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.isread_cmb = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[u"未調査", u"調査済"], style=wx.CB_DROPDOWN)
        self.isread_cmb.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        self.isread_cmb.SetSelection(1)
        sizer_5.Add(self.isread_cmb, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)

        self.clf_btn = wx.Button(self.panel_1, wx.ID_ANY, u"分類追加")
        self.clf_btn.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(self.clf_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.clf_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, "")
        self.clf_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(self.clf_lbl, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 6)

        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_7, 1, wx.EXPAND, 0)

        self.aff_btn = wx.Button(self.panel_1, wx.ID_ANY, u"所属追加")
        self.aff_btn.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_7.Add(self.aff_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.aff_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, "")
        self.aff_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_7.Add(self.aff_lbl, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 6)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_6, 1, wx.ALIGN_RIGHT, 0)

        self.registerPaper_btn = wx.Button(self.panel_1, wx.ID_ANY, u"登録")
        self.registerPaper_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_6.Add(self.registerPaper_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()
        self.db = args[2]
        self.filedialog = wx.FileDialog(self, u'選択')
        self.clfs_id = []
        self.affs_id = []

        self.Bind(wx.EVT_BUTTON, self.selectFile, self.fileselect_btn)
        self.Bind(wx.EVT_BUTTON, self.attachClf, self.clf_btn)
        self.Bind(wx.EVT_BUTTON, self.attachAff, self.aff_btn)
        self.Bind(wx.EVT_BUTTON, self.registerPaper, self.registerPaper_btn)
        # end wxGlade

    def registerPaper(self, event):  # wxGlade: RegisterPaper.<event_handler>
        bibtex = self.bibtex_txt.GetValue()
        selected_file = self.fileBibtex_txt.GetValue()
        isread = self.isread_cmb.GetSelection()
        description = self.description_txt.GetValue() if self.description_txt.GetValue() != "" else None
        doi = self.doi_txt.GetValue() if self.doi_txt.GetValue() != "" else None
        if(selected_file == "" or selected_file == None):
            filepath = None
        else:
            filepath = './resource/doc/' + os.path.splitext(os.path.basename(self.db))[0] + '/' + os.path.basename(selected_file)

        #--- Register Paper---#
        [paper, registered_authors] = registerByBibtex(
            self.db,
            bibtex,
            filepath,
            description=description,
            doi=doi,
            isread=isread
        )
        if(paper == 0):
            wx.MessageBox(u'処理に失敗しました\n登録を中断しました', u'Paper Register Failed', wx.ICON_ERROR)
            return

        #--- Copy File ---#
        if(os.path.isfile(selected_file)):
            shutil.copyfile(
                selected_file,
                './resource/doc/' + os.path.splitext(os.path.basename(self.db))[0] + '/' + os.path.basename(selected_file)
            )
        self.Close()

        #--- Attach Classification to Paper ---#
        c_m = ClassificationManagement(self.db)
        for clf_id in self.clfs_id:
            c_m.create(paper[0], clf_id)

        #--- Attach Affiliation to Paper ---#
        af_m = AffiliationManagement(self.db)
        for aff_id in self.affs_id:
            af_m.create(paper[0], aff_id)

        #--- Update Paper Grid ---#
        p = Paper(self.db)
        a = Author(self.db)
        row_len = self.GetParent().paper_grid.GetNumberRows()
        self.GetParent().paper_grid.AppendRows()
        self.GetParent().paper_grid.SetCellValue(row_len, 0, paper[1])
        if(paper[2] != None):
            self.GetParent().paper_grid.SetCellValue(row_len, 1, str(paper[2]))  # Year
        authors = ""
        clfs = ""
        affs = ""
        if(p.authors(paper[0]) != None or p.authors(paper[0]) != []):
            for author in p.authors(paper[0]):
                authors += author[1] + "; "
            self.GetParent().paper_grid.SetCellValue(row_len, 2, authors)  # Author
        if(p.classifications(paper[0]) != None or p.classifications(paper[0]) != []):
            for clf in p.classifications(paper[0]):
                clfs += clf[1] + "; "
        self.GetParent().paper_grid.SetCellValue(row_len, 3, clfs)  # Classification
        if(p.affiliations(paper[0]) != None or p.affiliations(paper[0]) != []):
            for aff in p.affiliations(paper[0]):
                affs += aff[1] + "; "
        self.GetParent().paper_grid.SetCellValue(row_len, 4, affs)  # Affiliationn
        self.GetParent().paper_grid.SetCellValue(row_len, 5, paper[8])
        self.GetParent().paper_grid.SetCellValue(row_len, 6, paper[9])

        #--- Update Paper Grid ---#
        for registered_author in registered_authors:
            row_len = self.GetParent().author_grid.GetNumberRows()
            self.GetParent().author_grid.AppendRows()
            self.GetParent().author_grid.SetCellValue(row_len, 0, registered_author[1])
            aff = a.affiliation(author[0])
            if(aff != None):
                self.GetParent().author_grid.SetCellValue(row_len, 1, aff[1])
            papers = a.papers(author[0])
            self.GetParent().author_grid.SetCellValue(row_len, 2, str(len(papers)))

    def selectFile(self, event):  # wxGlade: RegisterPaper.<event_handler>

        self.filedialog.ShowModal()
        self.fileBibtex_txt.SetValue(self.filedialog.GetPath())

    def attachClf(self, event):  # wxGlade: RegisterPaper.<event_handler>

        self.AttachClf = AttachClassification(self, wx.ID_ANY, self.db)
        self.AttachClf.Show()

    def attachAff(self, event):  # wxGlade: RegisterPaper.<event_handler>

        self.AttachAff = AttachAffiliation(self, wx.ID_ANY, self.db)
        self.AttachAff.Show()

    def indexClassifications(self):
        clf_lbl = ""
        for clf_id in self.clfs_id:
            c = Classification(self.db)
            clf = c.find(clf_id)
            clf_lbl += str(clf[1]) + "; "
        self.clf_lbl.SetLabel(clf_lbl)

    def showAffiliations(self):
        aff_lbl = ""
        for aff_id in self.affs_id:
            af = Affiliation(self.db)
            aff = af.find(aff_id)
            aff_lbl += str(aff[1]) + "; "
        self.aff_lbl.SetLabel(aff_lbl)
# end of class RegisterPaper


class ShowPaper(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ShowPaper.__init__
        self.db = args[2]
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((677, 559))
        self.SetTitle("rpos : Show Paper")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.panel_4 = wx.ScrolledWindow(self.panel_1, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.panel_4.SetScrollRate(10, 10)
        sizer_1.Add(self.panel_4, 1, wx.EXPAND, 0)

        grid_sizer_1 = wx.FlexGridSizer(7, 2, 0, 0)

        title_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "Title")
        title_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(title_lbl, 0, wx.ALL, 2)

        title_show_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "")
        title_show_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        title_show_lbl.Wrap(400)
        if(self.GetParent().selected_paper[1] != None):
            title_show_lbl.SetLabel(self.GetParent().selected_paper[1])
        grid_sizer_1.Add(title_show_lbl, 0, wx.ALL, 2)

        year_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "Year")
        year_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(year_lbl, 0, wx.ALL, 2)

        year_show_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "")
        year_show_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_paper[2] != None):
            year_show_lbl.SetLabel(str(self.GetParent().selected_paper[2]))
        grid_sizer_1.Add(year_show_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        author_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "Author")
        author_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(author_lbl, 0, wx.ALL, 2)

        author_show_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "")
        author_show_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        author_show_lbl.Wrap(400)
        p = Paper(self.db)
        authors = p.authors(self.GetParent().selected_paper[0])
        names = ""
        for i, author in enumerate(authors):
            names += author[1] + "; "
        author_show_lbl.SetLabel(names)
        grid_sizer_1.Add(author_show_lbl, 0, wx.ALL, 2)

        doi_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "DOI", style=wx.ALIGN_CENTER_HORIZONTAL)
        doi_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(doi_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.doi_show_link = wx.adv.HyperlinkCtrl(self.panel_4, wx.ID_ANY, "", "")
        self.doi_show_link.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_paper[5] != None):
            self.doi_show_link.SetLabel(self.GetParent().selected_paper[5])
            self.doi_show_link.SetURL(self.GetParent().selected_paper[5])
        grid_sizer_1.Add(self.doi_show_link, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.isread_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "Is Read")
        self.isread_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(self.isread_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        isread_show_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "")
        isread_show_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_paper[7] == 0):
            isread_show_lbl.SetLabel("Not Yet")
        else:
            isread_show_lbl.SetLabel("Done")
        grid_sizer_1.Add(isread_show_lbl, 0, wx.ALL, 2)

        self.clf_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "Classification")
        self.clf_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(self.clf_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        clf_show_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "")
        clf_show_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        clfs = p.classifications(self.GetParent().selected_paper[0])
        clf_name = ""
        for clf in clfs:
            clf_name += str(clf[1]) + "; "
        clf_show_lbl.SetLabel(clf_name)

        grid_sizer_1.Add(clf_show_lbl, 0, wx.ALL, 2)

        self.aff_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "Affiliation")
        self.aff_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(self.aff_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        aff_show_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "")
        aff_show_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        affs = p.affiliations(self.GetParent().selected_paper[0])
        aff_name = ""
        for aff in affs:
            aff_name += str(aff[1]) + "; "
        aff_show_lbl.SetLabel(aff_name)
        grid_sizer_1.Add(aff_show_lbl, 0, wx.ALL, 2)

        grid_sizer_2 = wx.GridSizer(1, 2, 0, 0)
        sizer_1.Add(grid_sizer_2, 1, wx.ALL | wx.EXPAND, 4)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_2.Add(sizer_4, 1, 0, 0)

        desc_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, "Description")
        desc_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_4.Add(desc_lbl, 0, wx.ALL, 2)

        self.panel_3 = wx.Panel(self.panel_1, wx.ID_ANY)
        sizer_4.Add(self.panel_3, 1, wx.EXPAND, 0)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)

        desc_show_lbl = wx.StaticText(self.panel_3, wx.ID_ANY, "")
        desc_show_lbl.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_paper[6] != None):
            desc_show_lbl.SetLabel(self.GetParent().selected_paper[6])
        sizer_2.Add(desc_show_lbl, 1, wx.ALL, 4)

        sizer_10 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_2.Add(sizer_10, 1, wx.EXPAND, 0)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10.Add(sizer_6, 0, 0, 0)

        bibtex_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, "BibTex")
        bibtex_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_6.Add(bibtex_lbl, 0, wx.ALL, 2)

        self.copyBibtex_btn = wx.Button(self.panel_1, wx.ID_ANY, "Copy Bibtex")
        sizer_6.Add(self.copyBibtex_btn, 0, wx.ALL, 2)

        self.panel_2 = wx.ScrolledWindow(self.panel_1, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.panel_2.SetScrollRate(10, 10)
        sizer_10.Add(self.panel_2, 1, wx.EXPAND, 0)

        sizer_12 = wx.BoxSizer(wx.HORIZONTAL)

        bibtex_show_lbl = wx.StaticText(self.panel_2, wx.ID_ANY, "")
        bibtex_show_lbl.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        bibtex_show_lbl.SetLabel(self.GetParent().selected_paper[4])
        sizer_12.Add(bibtex_show_lbl, 2, wx.ALL | wx.EXPAND, 2)

        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_11, 0, wx.ALIGN_RIGHT, 0)

        self.openFile_btn = wx.Button(self.panel_1, wx.ID_ANY, "Open File")
        self.openFile_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(self.openFile_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)

        self.editPaper_btn = wx.Button(self.panel_1, wx.ID_ANY, "Edit")
        self.editPaper_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(self.editPaper_btn, 0, wx.ALL, 7)

        self.close_btn = wx.Button(self.panel_1, wx.ID_ANY, "Close")
        self.close_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(self.close_btn, 0, wx.ALL, 7)

        self.panel_2.SetSizer(sizer_12)

        self.panel_3.SetSizer(sizer_2)

        self.panel_4.SetSizer(grid_sizer_1)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_BUTTON, self.openFile, self.openFile_btn)
        self.Bind(wx.EVT_BUTTON, self.editPaper, self.editPaper_btn)
        self.Bind(wx.EVT_BUTTON, self.closeWindow, self.close_btn)
        # end wxGlade

    def editPaper(self, event):  # wxGlade: ShowPaper.<event_handler>
        self.Close()
        editPaper = EditPaper(self.GetParent(), wx.ID_ANY, self.db)
        editPaper.Show()

    def openFile(self, event):  # wxGlade: ShowPaper.<event_handler>
        self.GetParent().paperFileOpen(event)

    def closeWindow(self, event):  # wxGlade: ShowPaper.<event_handler>
        self.Close()
# end of class ShowPaper


class EditPaper(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: EditPaper.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((623, 607))
        self.SetTitle("rpos : Edit Paper")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.panel_1.SetScrollRate(10, 10)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.panel_2 = wx.Panel(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.panel_2, 0, wx.EXPAND, 0)

        sizer_10 = wx.BoxSizer(wx.VERTICAL)

        label_1 = wx.StaticText(self.panel_2, wx.ID_ANY, "BibTex")
        label_1.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_10.Add(label_1, 0, wx.ALL, 3)

        self.bibtex_txt = wx.TextCtrl(self.panel_2, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_MULTILINE)
        self.bibtex_txt.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_paper[4] != None):
            self.bibtex_txt.SetValue(self.GetParent().selected_paper[4])
        sizer_10.Add(self.bibtex_txt, 1, wx.ALL | wx.EXPAND, 2)

        self.panel_3 = wx.Panel(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.panel_3, 0, wx.ALL | wx.EXPAND, 0)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)

        description_lbl = wx.StaticText(self.panel_3, wx.ID_ANY, u"詳細")
        description_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_4.Add(description_lbl, 0, wx.ALL, 3)

        self.description_txt = wx.TextCtrl(self.panel_3, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.description_txt.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_paper[6] != None):
            self.description_txt.SetValue(self.GetParent().selected_paper[6])
        sizer_4.Add(self.description_txt, 1, wx.ALL | wx.EXPAND, 2)

        self.panel_4 = wx.Panel(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.panel_4, 0, wx.EXPAND, 0)

        grid_sizer_1 = wx.FlexGridSizer(5, 2, 2, 0)

        fileBibtex_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, u"ファイル", style=wx.ALIGN_CENTER_HORIZONTAL)
        fileBibtex_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(fileBibtex_lbl, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1.Add(sizer_11, 0, wx.EXPAND, 0)

        self.fileBibtex_txt = wx.TextCtrl(self.panel_4, wx.ID_ANY, "")
        self.fileBibtex_txt.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_paper[3] != None):
            self.fileBibtex_txt.SetValue(self.GetParent().selected_paper[3])
        sizer_11.Add(self.fileBibtex_txt, 13, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.fileselect_btn = wx.Button(self.panel_4, wx.ID_ANY, u"変更\n")
        self.fileselect_btn.SetMinSize((68, 25))
        self.fileselect_btn.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(self.fileselect_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.SHAPED, 1)

        doi_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "DOI", style=wx.ALIGN_CENTER_HORIZONTAL)
        doi_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(doi_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.doi_txt = wx.TextCtrl(self.panel_4, wx.ID_ANY, "")
        self.doi_txt.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_paper[5] != None):
            self.doi_txt.SetValue(self.GetParent().selected_paper[5])
        grid_sizer_1.Add(self.doi_txt, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL | wx.EXPAND, 2)

        self.isread_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, u"調査")
        self.isread_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(self.isread_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.isread_cmb = wx.ComboBox(self.panel_4, wx.ID_ANY, choices=[u"未調査", u"調査済"], style=wx.CB_DROPDOWN)
        self.isread_cmb.SetMinSize((80, 27))
        self.isread_cmb.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        self.isread_cmb.SetSelection(self.GetParent().selected_paper[7])
        grid_sizer_1.Add(self.isread_cmb, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.clf_btn = wx.Button(self.panel_4, wx.ID_ANY, u"分類追加")
        self.clf_btn.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(self.clf_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.clf_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "")
        self.clf_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(self.clf_lbl, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.aff_btn = wx.Button(self.panel_4, wx.ID_ANY, u"所属追加")
        self.aff_btn.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(self.aff_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.aff_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "")
        self.aff_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(self.aff_lbl, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.editPaper_btn = wx.Button(self.panel_1, wx.ID_ANY, u"変更")
        self.editPaper_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_1.Add(self.editPaper_btn, 0, wx.ALIGN_RIGHT | wx.ALL, 7)

        grid_sizer_1.AddGrowableCol(1)
        self.panel_4.SetSizer(grid_sizer_1)

        self.panel_3.SetSizer(sizer_4)

        self.panel_2.SetSizer(sizer_10)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()
        self.db = args[2]
        self.filedialog = wx.FileDialog(self, u'選択')

        p = Paper(self.db)

        #--- Show Classification ---#
        clfs = p.classifications(self.GetParent().selected_paper[0])
        self.clfs_id = []
        for clf in clfs:
            self.clfs_id.append(clf[0])
        self.indexClassifications()

        #--- Show Affiliations ---#
        affs = p.affiliations(self.GetParent().selected_paper[0])
        self.affs_id = []
        for aff in affs:
            self.affs_id.append(aff[0])
        self.showAffiliations()

        self.Bind(wx.EVT_BUTTON, self.selectFile, self.fileselect_btn)
        self.Bind(wx.EVT_BUTTON, self.attachClf, self.clf_btn)
        self.Bind(wx.EVT_BUTTON, self.attachAff, self.aff_btn)
        self.Bind(wx.EVT_BUTTON, self.editPaper, self.editPaper_btn)
        # end wxGlade

    def editPaper(self, event):  # wxGlade: EditPaper.<event_handler>
        bibtex = self.bibtex_txt.GetValue()
        selected_file = self.fileBibtex_txt.GetValue()
        isread = self.isread_cmb.GetSelection()
        description = self.description_txt.GetValue() if self.description_txt.GetValue() != "" else None
        doi = self.doi_txt.GetValue() if self.doi_txt.GetValue() != "" else None

        #--- Set New File Path ---#
        if(selected_file == "" or selected_file == None):
            new_filepath = None
        else:
            new_filepath = './resource/doc/' + os.path.splitext(os.path.basename(self.db))[0] + '/' + os.path.basename(selected_file)

        #--- Delete Old File ---#
        if(
            self.GetParent().selected_paper[3] != None and  # 変更前のファイルがNULLではない
            self.GetParent().selected_paper[3] != new_filepath and  # 変更前のファイルと新しいファイルが同じではない
            os.path.isfile(self.GetParent().selected_paper[3])  # 変更前のファイルが存在する
        ):
            try:
                msg = wx.MessageBox(
                    u'以下のファイルが削除されます\n' + self.GetParent().selected_paper[3] + '\n削除しますか',
                    u'Paper Delete',
                    wx.YES_NO | wx.NO_DEFAULT | wx.ICON_WARNING
                )
                if(msg == wx.YES):
                    os.remove(self.GetParent().selected_paper[3])
                else:
                    wx.MessageBox(u'ファイルを削除できません\n更新処理を中断しました', u'Could not Delete', wx.ICON_ERROR)
                    return
            except PermissionError:
                wx.MessageBox(u'ファイルを削除できません\n更新処理を中断しました', u'Could not Delete', wx.ICON_ERROR)
                return

        #--- Copy File ---#
        if(not(os.path.isfile(new_filepath))):
            shutil.copyfile(
                selected_file,
                './resource/doc/' + os.path.splitext(os.path.basename(self.db))[0] + '/' + os.path.basename(selected_file)
            )

        #--- Update Paper Information ---#
        paper = updateByBibtex(
            self.db,
            self.GetParent().selected_paper[0],
            bibtex,
            new_filepath,
            description=description,
            doi=doi,
            isread=isread
        )

        #--- Attach Classification to Paper ---#
        c_m = ClassificationManagement(self.db)
        clfs_old = c_m.where(paper_id=self.GetParent().selected_paper[0])
        for clf in clfs_old:
            c_m.deleteByID(clf[0])
        for clf_id in self.clfs_id:
            c_m.create(self.GetParent().selected_paper[0], clf_id)

        #--- Attach Affiliation to Paper ---#
        af_m = AffiliationManagement(self.db)
        affs_old = af_m.where(paper_id=self.GetParent().selected_paper[0])
        for aff in affs_old:
            af_m.deleteByID(aff[0])
        for aff_id in self.affs_id:
            af_m.create(self.GetParent().selected_paper[0], aff_id)

        self.Close()

        #--- Update Paper Grid ---#
        p = Paper(self.db)
        a = Author(self.db)
        authors = a.All()
        self.GetParent().indexAuthor(authors)

        row_len = self.GetParent().row
        self.GetParent().paper_grid.SetCellValue(row_len, 0, paper[1])
        if(paper[2] != None):
            self.GetParent().paper_grid.SetCellValue(row_len, 1, str(paper[2]))  # Year
        authors = ""
        clfs = ""
        affs = ""
        if(p.authors(paper[0]) != None or p.authors(paper[0]) != []):
            for author in p.authors(paper[0]):
                authors += author[1] + "; "
            self.GetParent().paper_grid.SetCellValue(row_len, 2, authors)  # Author
        if(p.classifications(paper[0]) != None or p.classifications(paper[0]) != []):
            for clf in p.classifications(paper[0]):
                clfs += clf[1] + "; "
        self.GetParent().paper_grid.SetCellValue(row_len, 3, clfs)  # Classification
        if(p.affiliations(paper[0]) != None or p.affiliations(paper[0]) != []):
            for aff in p.affiliations(paper[0]):
                affs += aff[1] + "; "
        self.GetParent().paper_grid.SetCellValue(row_len, 4, affs)  # Affiliationn

    def selectFile(self, event):  # wxGlade: EditPaper.<event_handler>

        self.filedialog.ShowModal()
        self.fileBibtex_txt.SetValue(self.filedialog.GetPath())

    def attachClf(self, event):  # wxGlade: EditPaper.<event_handler>

        self.AttachClf = AttachClassification(self, wx.ID_ANY, self.db)
        self.AttachClf.Show()

    def attachAff(self, event):  # wxGlade: EditPaper.<event_handler>

        self.AttachAff = AttachAffiliation(self, wx.ID_ANY, self.db)
        self.AttachAff.Show()

    def indexClassifications(self):
        clf_lbl = ""
        for clf_id in self.clfs_id:
            c = Classification(self.db)
            clf = c.find(clf_id)
            clf_lbl += str(clf[1]) + "; "
        self.clf_lbl.SetLabel(clf_lbl)

    def showAffiliations(self):
        aff_lbl = ""
        for aff_id in self.affs_id:
            af = Affiliation(self.db)
            aff = af.find(aff_id)
            aff_lbl += str(aff[1]) + "; "
        self.aff_lbl.SetLabel(aff_lbl)
# end of class EditPaper


###------ Author ------###
class ShowAuthor(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ShowAuthor.__init__
        self.db = args[2]
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 351))
        self.SetTitle("frame")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        self.panel_4 = wx.Panel(self.panel_1, wx.ID_ANY)
        sizer_1.Add(self.panel_4, 1, wx.ALL | wx.EXPAND, 2)

        grid_sizer_1 = wx.FlexGridSizer(3, 2, 0, 0)

        name_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "Name")
        name_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(name_lbl, 0, wx.ALL, 2)

        name_show_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "")
        name_show_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        name_show_lbl.Wrap(400)
        name_show_lbl.SetLabel(self.GetParent().selected_author[1])
        grid_sizer_1.Add(name_show_lbl, 0, wx.ALL, 2)

        affiliation_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "Affiliation")
        affiliation_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(affiliation_lbl, 0, wx.ALL, 2)

        affiliation_show_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "")
        affiliation_show_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        a = Author(self.db)
        aff = a.affiliation(self.GetParent().selected_author[0])
        if(aff != None):
            affiliation_show_lbl.SetLabel(aff[1])
        grid_sizer_1.Add(affiliation_show_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        papernum_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "Number of Papers")
        papernum_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(papernum_lbl, 0, wx.ALL, 2)

        papernum_show_lbl = wx.StaticText(self.panel_4, wx.ID_ANY, "")
        papernum_show_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        papernum_show_lbl.Wrap(400)
        papers = a.papers(self.GetParent().selected_author[0])
        papernum_show_lbl.SetLabel(str(len(papers)))
        grid_sizer_1.Add(papernum_show_lbl, 0, wx.ALL, 2)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_4, 3, wx.ALL | wx.EXPAND, 2)

        desc_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, "Description")
        desc_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_4.Add(desc_lbl, 0, wx.ALL, 2)

        self.panel_3 = wx.ScrolledWindow(self.panel_1, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.panel_3.SetScrollRate(10, 10)
        sizer_4.Add(self.panel_3, 1, wx.EXPAND, 0)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)

        desc_show_lbl = wx.StaticText(self.panel_3, wx.ID_ANY, "")
        desc_show_lbl.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_author[2] != None):
            desc_show_lbl.SetLabel(self.GetParent().selected_author[2])
        sizer_2.Add(desc_show_lbl, 1, wx.ALL, 4)

        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_11, 0, wx.ALIGN_RIGHT, 0)

        self.narrowAuthor_btn = wx.Button(self.panel_1, wx.ID_ANY, "Narrow")
        self.narrowAuthor_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(self.narrowAuthor_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)

        self.editAuthor_btn = wx.Button(self.panel_1, wx.ID_ANY, "Edit")
        self.editAuthor_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(self.editAuthor_btn, 0, wx.ALL, 7)

        self.close_btn = wx.Button(self.panel_1, wx.ID_ANY, "Close")
        self.close_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(self.close_btn, 0, wx.ALL, 7)

        self.panel_3.SetSizer(sizer_2)

        self.panel_4.SetSizer(grid_sizer_1)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_BUTTON, self.narrowAuthor, self.narrowAuthor_btn)
        self.Bind(wx.EVT_BUTTON, self.editAuthor, self.editAuthor_btn)
        self.Bind(wx.EVT_BUTTON, self.closeWindow, self.close_btn)
        # end wxGlade

    def narrowAuthor(self, event):  # wxGlade: ShowAuthor.<event_handler>
        self.GetParent().narAuthor_txtCtrl.SetValue(self.GetParent().selected_author[1])
        self.GetParent().narrowPaper(event)
        self.GetParent().notebook.SetSelection(0)

    def editAuthor(self, event):  # wxGlade: ShowAuthor.<event_handler>
        self.Close()
        editAuthor = EditAuthor(self.GetParent(), wx.ID_ANY, self.db)
        editAuthor.Show()

    def closeWindow(self, event):  # wxGlade: ShowAuthor.<event_handler>
        self.Close()
# end of class ShowAuthor


class EditAuthor(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: EditAuthor.__init__
        self.db = args[2]
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 396))
        self.SetTitle("rpos : Edit Author")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        edit_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"著者編集")
        edit_lbl.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_2.Add(edit_lbl, 0, wx.ALL, 4)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)

        name_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"著者名")
        name_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(name_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.name_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.name_txt.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_author[1] != None):
            self.name_txt.SetValue(self.GetParent().selected_author[1])
        sizer_3.Add(self.name_txt, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_4, 4, wx.EXPAND, 0)

        desc_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"詳細")
        desc_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_4.Add(desc_lbl, 0, wx.ALL, 3)

        self.desc_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.desc_txt.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_author[2] != None):
            self.desc_txt.SetValue(self.GetParent().selected_author[2])
        sizer_4.Add(self.desc_txt, 8, wx.ALL | wx.EXPAND, 3)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_6, 0, wx.ALL | wx.EXPAND, 2)

        affiliation_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"所属")
        affiliation_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_6.Add(affiliation_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.affiliation_cmb = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.affiliation_cmb.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        af = Affiliation(self.db)
        affs = af.All()
        self.affiliation_cmb.Append("")
        for i, aff in enumerate(affs):
            self.affiliation_cmb.Append(aff[1])
            if(self.GetParent().selected_author[3] == aff[0]):
                self.affiliation_cmb.SetSelection(i + 1)
        sizer_6.Add(self.affiliation_cmb, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.edit_btn = wx.Button(self.panel_1, wx.ID_ANY, u"保存")
        self.edit_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_2.Add(self.edit_btn, 0, wx.ALIGN_RIGHT | wx.ALL, 5)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_BUTTON, self.editAuthor, self.edit_btn)
        # end wxGlade

    def editAuthor(self, event):  # wxGlade: EditAuthor.<event_handler>
        a = Author(self.db)
        af = Affiliation(self.db)

        name = self.name_txt.GetValue()
        desc = self.desc_txt.GetValue()
        aff = self.affiliation_cmb.GetValue()
        affs = af.where(name=aff[1])
        aff_id = affs[0][0]

        author = Author.getDicFormat(name, desc, affs[0][0])
        a.update(self.GetParent().selected_author[0], author)
        self.GetParent().indexAuthor(a.All())
        self.GetParent().resetNarrowing(event)
        self.Close()
# end of class EditAuthor


###------ Classification ------###
class RegisterClassification(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: RegisterClassification.__init__
        self.db = args[2]
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 397))
        self.SetTitle("rpos : Register Classification")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        clf_create_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"新規分類ラベル登録")
        clf_create_lbl.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_2.Add(clf_create_lbl, 0, wx.ALL, 4)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)

        name_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"分類名")
        name_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(name_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.name_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.name_txt.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(self.name_txt, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_4, 4, wx.EXPAND, 0)

        desc_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"詳細")
        desc_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_4.Add(desc_lbl, 0, wx.ALL, 3)

        self.desc_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.desc_txt.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_4.Add(self.desc_txt, 8, wx.ALL | wx.EXPAND, 3)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_5, 0, wx.EXPAND, 0)

        sort_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"ソート番号")
        sort_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_5.Add(sort_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.sort_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.sort_txt.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_5.Add(self.sort_txt, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_6, 0, wx.ALL | wx.EXPAND, 2)

        parent_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"親分類")
        parent_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_6.Add(parent_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.parent_cmb = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.parent_cmb.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        c = Classification(self.db)
        clfs = c.All()
        self.parent_cmb.Append("")
        for clf in clfs:
            self.parent_cmb.Append(clf[1])
        sizer_6.Add(self.parent_cmb, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.create_btn = wx.Button(self.panel_1, wx.ID_ANY, u"新規作成")
        self.create_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_2.Add(self.create_btn, 0, wx.ALIGN_RIGHT | wx.ALL, 5)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_BUTTON, self.createClassification, self.create_btn)
        # end wxGlade

    def createClassification(self, event):  # wxGlade: RegisterClassification.<event_handler>
        #--- Register New Classification ---#
        name = self.name_txt.GetValue()
        desc = self.desc_txt.GetValue()
        turn = self.sort_txt.GetValue()
        parent = self.parent_cmb.GetValue()
        if(turn == None or turn == ""):
            turn = 0
        parent_clf = self.parent_cmb.GetValue()
        c = Classification(self.db)
        clf = c.getDicFormat(name, desc, turn)
        clf = c.create(clf)

        #--- Register Relation ---#
        if(parent != ""):
            cl_m = ClassificationLabelManagement(self.db)
            parent_clf = c.where(name=parent)
            cl_m.create(parent_clf[0][0], clf[0])
        self.Close()

        #--- Update TreeCtrl ---#
        clfs = c.All(column='turn')
        self.GetParent().indexClassifications(c, clfs)
        self.GetParent().SetClfSelection()
# end of class RegisterClassification


class EditClassification(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: EditClassification.__init__
        self.db = args[2]
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 426))
        self.SetTitle("rpos : Edit Classification")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        clf_edit_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"分類ラベル編集")
        clf_edit_lbl.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_2.Add(clf_edit_lbl, 0, wx.ALL, 4)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)

        name_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"分類名")
        name_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(name_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.name_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.name_txt.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_clf[1] != None):
            self.name_txt.SetValue(self.GetParent().selected_clf[1])
        sizer_3.Add(self.name_txt, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_4, 4, wx.EXPAND, 0)

        desc_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"詳細")
        desc_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_4.Add(desc_lbl, 0, wx.ALL, 3)

        self.desc_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.desc_txt.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(self.GetParent().selected_clf[2] != None):
            self.desc_txt.SetValue(self.GetParent().selected_clf[2])
        sizer_4.Add(self.desc_txt, 8, wx.ALL | wx.EXPAND, 3)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_5, 0, wx.EXPAND, 0)

        sort_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"ソート番号")
        sort_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_5.Add(sort_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.sort_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.sort_txt.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        self.sort_txt.SetValue(str(self.GetParent().selected_clf[3]))
        sizer_5.Add(self.sort_txt, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_6, 0, wx.ALL | wx.EXPAND, 2)

        parent_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"親分類")
        parent_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_6.Add(parent_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.parent_cmb = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN)
        self.parent_cmb.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        c = Classification(self.db)
        clfs = c.All()
        parent_clf = c.parentclasses(self.GetParent().selected_clf[0])
        self.parent_cmb.Append("")
        for i, clf in enumerate(clfs):
            if(self.GetParent().selected_clf[0] == clf[0]):
                continue
            self.parent_cmb.Append(clf[1])
            if(parent_clf != [] and clf[0] == parent_clf[0][0]):
                self.parent_cmb.SetSelection(i + 1)
        sizer_6.Add(self.parent_cmb, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.edit_btn = wx.Button(self.panel_1, wx.ID_ANY, u"保存")
        self.edit_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_2.Add(self.edit_btn, 0, wx.ALIGN_RIGHT | wx.ALL, 5)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_BUTTON, self.editClassification, self.edit_btn)
        # end wxGlade

    def editClassification(self, event):  # wxGlade: EditClassification.<event_handler>

        #--- Register New Classification ---#
        name = self.name_txt.GetValue()
        desc = self.desc_txt.GetValue()
        turn = self.sort_txt.GetValue()
        parent = self.parent_cmb.GetValue()
        if(turn == None or turn == ""):
            turn = 0
        parent_clf = self.parent_cmb.GetValue()
        c = Classification(self.db)
        clf = c.getDicFormat(name, desc, turn)
        c.update(self.GetParent().selected_clf[0], clf)

        #--- Edit Relation ---#
        cl_m = ClassificationLabelManagement(self.db)
        parent_clf_l_man = cl_m.where(sub_classification_id=self.GetParent().selected_clf[0])
        if(parent_clf_l_man != []):
            cl_m.deleteByID(parent_clf_l_man[0][0])
        if(parent != ""):
            parent_clf = c.where(name=parent)
            cl_m.create(parent_clf[0][0], self.GetParent().selected_clf[0])
        self.Close()
        self.GetParent().indexClassifications(c, c.All(column="turn"))

        #--- Update TreeCtrl ---#
        clfs = c.All(column='turn')
        self.GetParent().indexClassifications(c, clfs)
        self.GetParent().SetClfSelection()
# end of class EditClassification


class AttachClassification(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AttachClassification.__init__
        self.db = args[2]
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((285, 585))
        self.SetTitle("rpos : Classification List")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_1.Add((0, 0), 0, 0, 0)

        self.listctrl = ClfListCtrl(self.panel_1, style=wx.LC_REPORT)
        self.listctrl.InsertColumn(0, " ", wx.LIST_FORMAT_CENTER, 30)
        self.listctrl.InsertColumn(1, "id", wx.LIST_FORMAT_CENTER, 30)
        self.listctrl.InsertColumn(2, "name", wx.LIST_FORMAT_LEFT, 50)
        c = Classification(self.db)
        self.clfs = c.All()
        for i, clf in enumerate(self.clfs):
            self.listctrl.Append([" ", clf[0], clf[1]])
            if(clf[0] in self.GetParent().clfs_id):
                self.listctrl.CheckItem(i, True)
        sizer_1.Add(self.listctrl, 1, wx.ALL | wx.EXPAND, 2)

        self.attachClf_btn = wx.Button(self.panel_1, wx.ID_ANY, u"登録")
        self.attachClf_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_1.Add(self.attachClf_btn, 0, wx.ALIGN_RIGHT | wx.ALL, 3)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_BUTTON, self.attachClf, self.attachClf_btn)
        # end wxGlade

    def attachClf(self, event):  # wxGlade: AttachClassification.<event_handler>

        self.GetParent().clfs_id = self.listctrl.checkedItem
        self.Close()
        self.GetParent().indexClassifications()
# end of class AttachClassification


###------ Affiliation ------###
class RegisterAffiliation(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: RegisterAffiliation.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 300))
        self.SetTitle("rpos : Register Affiliation")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_10, 1, wx.ALL | wx.EXPAND, 1)

        name_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"名称")
        name_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_10.Add(name_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        self.name_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        sizer_10.Add(self.name_txt, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        sizer_11 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(sizer_11, 5, wx.EXPAND, 0)

        description_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"詳細")
        description_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(description_lbl, 0, wx.ALL, 3)

        self.description_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        sizer_11.Add(self.description_txt, 12, wx.ALL | wx.EXPAND, 2)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)

        self.attribute_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"属性")
        self.attribute_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(self.attribute_lbl, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 6)

        self.attribute_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        sizer_3.Add(self.attribute_txt, 12, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        self.registerPaper_btn = wx.Button(self.panel_1, wx.ID_ANY, u"登録")
        self.registerPaper_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_1.Add(self.registerPaper_btn, 0, wx.ALIGN_RIGHT | wx.ALL, 7)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()
        self.db = args[2]
        self.affs_id = []

        self.Bind(wx.EVT_BUTTON, self.registerAffiliation, self.registerPaper_btn)
        # end wxGlade

    def registerAffiliation(self, event):  # wxGlade: RegisterAffiliation.<event_handler>

        name = self.name_txt.GetValue()
        description = self.description_txt.GetValue()
        attribute = self.attribute_txt.GetValue()

        af = Affiliation(self.db)
        affiliation = af.getDicFormat(name, description, attribute)
        af.create(affiliation)
        self.GetParent().indexAffiliation(af.All())
        self.Close()
# end of class RegisterAffiliation


class AttachAffiliation(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AttachAffiliation.__init__
        self.db = args[2]
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 300))
        self.SetTitle("rpos : Affiliation List")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_1.Add((0, 0), 0, 0, 0)

        self.listctrl = AffListCtrl(self.panel_1, style=wx.LC_REPORT)
        self.listctrl.InsertColumn(0, " ", wx.LIST_FORMAT_CENTER, 30)
        self.listctrl.InsertColumn(1, "id", wx.LIST_FORMAT_CENTER, 30)
        self.listctrl.InsertColumn(2, "name", wx.LIST_FORMAT_LEFT, 50)
        af = Affiliation(self.db)
        self.affs = af.All()
        for i, aff in enumerate(self.affs):
            self.listctrl.Append([" ", aff[0], aff[1]])
            if(aff[0] in self.GetParent().affs_id):
                self.listctrl.CheckItem(i, True)
        sizer_1.Add(self.listctrl, 1, wx.ALL | wx.EXPAND, 2)

        self.attachClf_btn = wx.Button(self.panel_1, wx.ID_ANY, u"登録")
        self.attachClf_btn.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_1.Add(self.attachClf_btn, 0, wx.ALIGN_RIGHT | wx.ALL, 3)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_BUTTON, self.attachClf, self.attachClf_btn)
        # end wxGlade

    def attachClf(self, event):  # wxGlade: AttachAffiliation.<event_handler>

        self.GetParent().affs_id = self.listctrl.checkedItem
        self.Close()
        self.GetParent().showAffiliations()
# end of class AttachAffiliation


###------ Welcome Frame ------###
class WelcomePage(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: WelcomePage.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((600, 400))
        self.SetTitle("rpos : Welcome Page")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_5, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)

        welcome = wx.StaticText(self.panel_1, wx.ID_ANY, "Welcome to RPOS!")
        welcome.SetFont(wx.Font(20, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_5.Add(welcome, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)

        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_3, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)

        selectDB_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"データベースの選択", style=wx.ALIGN_CENTER_HORIZONTAL)
        selectDB_lbl.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_3.Add(selectDB_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 13)

        self.selectDB_dbx = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[""], style=wx.CB_DROPDOWN)
        self.selectDB_dbx.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        if(not(os.path.exists('./resource'))):
            os.mkdir('./resource')
        if(not(os.path.exists('./resource/db'))):
            os.mkdir('./resource/db')
        self.dbs = os.listdir('./resource/db')
        for db in self.dbs:
            self.selectDB_dbx.Append(db)
        sizer_3.Add(self.selectDB_dbx, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)

        self.selectDB_btn = wx.Button(self.panel_1, wx.ID_ANY, u"データベース選択")
        self.selectDB_btn.SetMinSize((100, 40))
        sizer_3.Add(self.selectDB_btn, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 13)

        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(sizer_4, 1, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.createDB_btn = wx.Button(self.panel_1, wx.ID_ANY, u"新規作成")
        self.createDB_btn.SetMinSize((120, 50))
        self.createDB_btn.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_4.Add(self.createDB_btn, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 30)

        self.rposGitHub_hl = wx.adv.HyperlinkCtrl(self.panel_1, wx.ID_ANY, "https://github.com/motthi/rpos", "https://github.com/motthi/rpos")
        self.rposGitHub_hl.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_2.Add(self.rposGitHub_hl, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_BUTTON, self.selectedDB, self.selectDB_btn)
        self.Bind(wx.EVT_BUTTON, self.createNewDB, self.createDB_btn)
        self.Bind(wx.EVT_CLOSE, self.exitProgram, self)
        # end wxGlade

    def selectedDB(self, event):  # wxGlade: WelcomePage.<event_handler>
        if(self.selectDB_dbx.GetSelection() == -1):
            wx.MessageBox("データベースを選択してください")
            return
        db_name = './resource/db/' + str(self.dbs[self.selectDB_dbx.GetSelection() - 1])
        self.Close()
        self.RposMain = RposMain(None, wx.ID_ANY, db_name)
        self.RposMain.Show()

    def createNewDB(self, event):  # wxGlade: WelcomePage.<event_handler>
        self.Close()
        self.CreateDB = CreateDB(None, wx.ID_ANY, "")
        self.CreateDB.Show()

    def exitProgram(self, event):  # wxGlade: WelcomePage.<event_handler>
        self.Destroy()
# end of class WelcomePage


class CreateDB(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CreateDB.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((515, 157))
        self.SetTitle("rpos : Creat Database")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.panel_1.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_2, 1, wx.EXPAND, 0)

        newDBname_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"新規データベース名")
        newDBname_lbl.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_2.Add(newDBname_lbl, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        self.newDBname_txt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "")
        self.newDBname_txt.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_2.Add(self.newDBname_txt, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 9)

        self.createDB_btn = wx.Button(self.panel_1, wx.ID_ANY, u"新規作成")
        sizer_2.Add(self.createDB_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 10)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()
        self.Centre()

        self.Bind(wx.EVT_BUTTON, self.createDB, self.createDB_btn)
        self.Bind(wx.EVT_CLOSE, self.exitProgram, self)
        # end wxGlade

    def createDB(self, event):  # wxGlade: CreateDB.<event_handler>
        db_name = self.newDBname_txt.GetValue()
        if(db_name == "" or db_name == None):
            wx.MessageBox("ファイル名を入力してください")
        elif(os.path.splitext(db_name)[1] == ""):
            wx.MessageBox("拡張子を入力してください")
        elif(os.path.exists("./resource/db/" + db_name)):
            wx.MessageBox("すでに存在するデータベースです")
        else:
            createAllTables("./resource/db/" + db_name)
            if(not(os.path.exists('./resource/doc/' + os.path.splitext(os.path.basename(db_name))[0]))):
                os.mkdir('./resource/doc/' + os.path.splitext(os.path.basename(db_name))[0])
            self.Close()
            self.RposMain = RposMain(None, wx.ID_ANY, "./resource/db/" + db_name)
            self.RposMain.Show()

    def exitProgram(self, event):  # wxGlade: CreateDB.<event_handler>
        self.Destroy()
# end of class CreateDB


###------ Main Frame ------###
class RposMain(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: RposMain.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE | wx.MAXIMIZE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1296, 696))
        self.SetTitle("rpos")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("./resource/document-2-512.jpg", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetBackgroundColour(wx.Colour(239, 247, 255))

        # Menu Bar
        self.rposmain_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Open", "")
        self.Bind(wx.EVT_MENU, self.openDatabase, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Close", "")
        self.Bind(wx.EVT_MENU, self.closeDatabase, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Exit", "")
        self.Bind(wx.EVT_MENU, self.exitProgram, item)
        self.rposmain_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Paper", "")
        self.Bind(wx.EVT_MENU, self.registerPaper, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Author", "")
        self.Bind(wx.EVT_MENU, self.registerAuthor, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Classification", "")
        self.Bind(wx.EVT_MENU, self.registerClassification, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Affiliation", "")
        self.Bind(wx.EVT_MENU, self.registerAffiliation, item)
        self.rposmain_menubar.Append(wxglade_tmp_menu, "Register")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ANY, "Backup", "")
        wxglade_tmp_menu.Append(wx.ID_ANY, "Delete All Data", "")
        wxglade_tmp_menu.Append(wx.ID_ANY, "Reset Database", "")
        self.rposmain_menubar.Append(wxglade_tmp_menu, "Database")
        self.SetMenuBar(self.rposmain_menubar)
        # Menu Bar end

        self.panel_1 = wx.Panel(self, wx.ID_ANY)
        self.db = args[2]

        grid_sizer_1 = wx.FlexGridSizer(2, 2, 1, 0)

        showLabelIndex_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"ラベル一覧")
        showLabelIndex_lbl.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        grid_sizer_1.Add(showLabelIndex_lbl, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)

        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1.Add(sizer_10, 1, wx.EXPAND, 0)

        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10.Add(sizer_8, 1, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        indexPaper_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, u"論文一覧　　")
        indexPaper_lbl.SetFont(wx.Font(15, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_8.Add(indexPaper_lbl, 0, 0, 0)

        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10.Add(sizer_11, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 2)

        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_11.Add(sizer_12, 1, wx.EXPAND | wx.LEFT | wx.RIGHT, 4)

        narTitle_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, "Title")
        narTitle_lbl.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_12.Add(narTitle_lbl, 0, 0, 0)

        self.narTitle_txtCtrl = wx.SearchCtrl(self.panel_1, wx.ID_ANY, "")
        self.narTitle_txtCtrl.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        self.narTitle_txtCtrl.ShowCancelButton(True)
        sizer_12.Add(self.narTitle_txtCtrl, 0, wx.LEFT, 20)

        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_11.Add(sizer_13, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 4)

        narAuthor_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, "Author")
        narAuthor_lbl.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_13.Add(narAuthor_lbl, 0, 0, 0)

        self.narAuthor_txtCtrl = wx.SearchCtrl(self.panel_1, wx.ID_ANY, "")
        self.narAuthor_txtCtrl.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        self.narAuthor_txtCtrl.ShowCancelButton(True)
        sizer_13.Add(self.narAuthor_txtCtrl, 0, wx.LEFT, 20)

        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_11.Add(sizer_14, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 4)

        narClf_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, "Classification")
        narClf_lbl.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_14.Add(narClf_lbl, 0, 0, 0)

        self.narClf_cmb = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[""], style=wx.CB_DROPDOWN)
        self.narClf_cmb.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        c = Classification(self.db)
        clfs = c.All()
        for clf in clfs:
            self.narClf_cmb.Append(clf[1])
        sizer_14.Add(self.narClf_cmb, 0, wx.LEFT, 20)

        sizer_15 = wx.BoxSizer(wx.VERTICAL)
        sizer_11.Add(sizer_15, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 4)

        narAff_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, "Affiliation")
        narAff_lbl.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_15.Add(narAff_lbl, 0, 0, 0)

        self.narAff_cmb = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[""], style=wx.CB_DROPDOWN)
        self.narAff_cmb.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        af = Affiliation(self.db)
        affs = af.All()
        for aff in affs:
            self.narAff_cmb.Append(aff[1])
        sizer_15.Add(self.narAff_cmb, 0, wx.LEFT, 20)

        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        sizer_11.Add(sizer_16, 0, wx.EXPAND | wx.LEFT | wx.RIGHT, 4)

        narRead_lbl = wx.StaticText(self.panel_1, wx.ID_ANY, "IsRead")
        narRead_lbl.SetFont(wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_16.Add(narRead_lbl, 0, 0, 0)

        self.narRead_cmb = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=["", "Not Yet", "Done"], style=wx.CB_DROPDOWN)
        self.narRead_cmb.SetFont(wx.Font(9, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_16.Add(self.narRead_cmb, 0, wx.LEFT, 20)

        self.detailNarrowing_btn = wx.Button(self.panel_1, wx.ID_ANY, u"リセット")
        self.detailNarrowing_btn.SetBackgroundColour(wx.Colour(217, 250, 255))
        self.detailNarrowing_btn.SetFont(wx.Font(11, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        sizer_11.Add(self.detailNarrowing_btn, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 0)

        self.clf_treectrl = wx.TreeCtrl(self.panel_1, wx.ID_ANY)
        self.clf_treectrl.SetBackgroundColour(wx.Colour(255, 250, 239))
        self.clf_treectrl.SetFont(wx.Font(10, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        c = Classification(self.db)
        clfs = c.All('turn', 'ASC')
        self.indexClassifications(c, clfs)
        grid_sizer_1.Add(self.clf_treectrl, 1, wx.ALL | wx.EXPAND, 3)

        self.notebook = wx.Notebook(self.panel_1, wx.ID_ANY)
        self.notebook.SetBackgroundColour(wx.Colour(239, 247, 255))
        grid_sizer_1.Add(self.notebook, 1, wx.ALL | wx.EXPAND, 2)

        self.papers_ntbk_pnl = wx.Panel(self.notebook, wx.ID_ANY)
        self.papers_ntbk_pnl.SetBackgroundColour(wx.Colour(239, 247, 255))
        self.notebook.AddPage(self.papers_ntbk_pnl, "Papers")

        sizer_3 = wx.BoxSizer(wx.VERTICAL)

        self.paper_grid = wx.grid.Grid(self.papers_ntbk_pnl, wx.ID_ANY, size=(1, 1))
        self.paper_grid.CreateGrid(1, 7)
        self.paper_grid.SetRowLabelSize(30)
        self.paper_grid.EnableEditing(0)
        self.paper_grid.SetLabelBackgroundColour(wx.Colour(245, 255, 244))
        self.paper_grid.SetColLabelValue(0, "Title")
        self.paper_grid.SetColSize(0, 488)
        self.paper_grid.SetColLabelValue(1, "Year")
        self.paper_grid.SetColSize(1, 48)
        self.paper_grid.SetColLabelValue(2, "Author")
        self.paper_grid.SetColSize(2, 403)
        self.paper_grid.SetColLabelValue(3, "Classification")
        self.paper_grid.SetColSize(3, 252)
        self.paper_grid.SetColLabelValue(4, "Affiliation")
        self.paper_grid.SetColSize(4, 106)
        self.paper_grid.SetColLabelValue(5, "Registered At")
        self.paper_grid.SetColSize(5, 160)
        self.paper_grid.SetColLabelValue(6, "Updated At")
        self.paper_grid.SetColSize(6, 160)
        self.paper_grid.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        p = Paper(self.db)
        self.indexPaper(p.All())
        self.pgrid_title_state = 0
        self.pgrid_year_state = 0
        self.pgrid_register_state = 0
        self.pgrid_update_state = 0
        sizer_3.Add(self.paper_grid, 20, wx.ALL | wx.EXPAND, 1)

        self.authors_ntbk_pnl = wx.Panel(self.notebook, wx.ID_ANY)
        self.authors_ntbk_pnl.SetBackgroundColour(wx.Colour(239, 247, 255))
        self.notebook.AddPage(self.authors_ntbk_pnl, "Authors")

        sizer_6 = wx.BoxSizer(wx.VERTICAL)

        self.author_grid = wx.grid.Grid(self.authors_ntbk_pnl, wx.ID_ANY, size=(1, 1))
        self.author_grid.CreateGrid(1, 4)
        self.author_grid.SetRowLabelSize(30)
        self.author_grid.SetLabelBackgroundColour(wx.Colour(245, 255, 244))
        self.author_grid.SetColLabelValue(0, "name")
        self.author_grid.SetColSize(0, 208)
        self.author_grid.SetColLabelValue(1, "affiliation")
        self.author_grid.SetColSize(1, 127)
        self.author_grid.SetColLabelValue(2, "papers")
        self.author_grid.SetColSize(2, 75)
        self.author_grid.SetColLabelValue(3, "description")
        self.author_grid.SetColSize(3, 431)
        self.author_grid.SetBackgroundColour(wx.Colour(234, 255, 233))
        self.author_grid.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        a = Author(self.db)
        self.indexAuthor(a.All())
        sizer_6.Add(self.author_grid, 20, wx.ALL | wx.EXPAND, 1)

        self.affiliations_ntbk_pnl = wx.Panel(self.notebook, wx.ID_ANY)
        self.affiliations_ntbk_pnl.SetBackgroundColour(wx.Colour(239, 247, 255))
        self.notebook.AddPage(self.affiliations_ntbk_pnl, "Affiliations")

        sizer_9 = wx.BoxSizer(wx.VERTICAL)

        self.affiliation_grid = wx.grid.Grid(self.affiliations_ntbk_pnl, wx.ID_ANY, size=(1, 1))
        self.affiliation_grid.CreateGrid(1, 2)
        self.affiliation_grid.SetRowLabelSize(20)
        self.affiliation_grid.SetLabelBackgroundColour(wx.Colour(245, 255, 244))
        self.affiliation_grid.SetColLabelValue(0, "name")
        self.affiliation_grid.SetColSize(0, 162)
        self.affiliation_grid.SetColLabelValue(1, "attribute")
        self.affiliation_grid.SetColSize(1, 211)
        self.affiliation_grid.SetBackgroundColour(wx.Colour(234, 255, 233))
        self.affiliation_grid.SetFont(wx.Font(13, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Yu Gothic UI"))
        af = Affiliation(self.db)
        self.indexAffiliation(af.All())
        sizer_9.Add(self.affiliation_grid, 30, wx.ALL | wx.EXPAND, 1)

        self.affiliations_ntbk_pnl.SetSizer(sizer_9)

        self.authors_ntbk_pnl.SetSizer(sizer_6)

        self.papers_ntbk_pnl.SetSizer(sizer_3)

        grid_sizer_1.AddGrowableRow(1)
        self.panel_1.SetSizer(grid_sizer_1)

        self.Layout()
        grid_sizer_1.AddGrowableCol(0, 1)
        grid_sizer_1.AddGrowableCol(1, 1)

        self.Bind(wx.EVT_TEXT, self.narrowPaper, self.narTitle_txtCtrl)
        self.Bind(wx.EVT_TEXT, self.narrowPaper, self.narAuthor_txtCtrl)
        self.Bind(wx.EVT_COMBOBOX, self.narrowPaper, self.narClf_cmb)
        self.Bind(wx.EVT_COMBOBOX, self.narrowPaper, self.narAff_cmb)
        self.Bind(wx.EVT_COMBOBOX, self.narrowPaper, self.narRead_cmb)
        self.Bind(wx.EVT_BUTTON, self.resetNarrowing, self.detailNarrowing_btn)
        self.Bind(wx.EVT_TREE_ITEM_RIGHT_CLICK, self.treeCtrl_rightClicked, self.clf_treectrl)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_LEFT_DCLICK, self.pGrid_dLeftClick, self.paper_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.pGrid_rightClick, self.paper_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_LABEL_LEFT_CLICK, self.pgridLabelLeftClicked, self.paper_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_SELECT_CELL, self.pGrid_leftClick, self.paper_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.aGrid_rightClick, self.author_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_SELECT_CELL, self.aGrid_leftClick, self.author_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_CELL_RIGHT_CLICK, self.afGrid_rightClick, self.affiliation_grid)
        self.Bind(wx.grid.EVT_GRID_CMD_SELECT_CELL, self.afGrid_leftClick, self.affiliation_grid)
        self.Bind(wx.EVT_CLOSE, self.exitProgram, self)
        # end wxGlade

    ###--- Paper ---###
    def indexPaper(self, papers):
        if(self.paper_grid.GetNumberRows() != 0):
            self.paper_grid.DeleteRows(0, self.paper_grid.GetNumberRows(), True)
        if(papers == []):
            return

        #--- Show Each Paper ---#
        for i, paper in enumerate(papers):
            p = Paper(self.db)
            self.paper_grid.AppendRows()
            self.paper_grid.SetCellValue(i, 0, paper[1])  # Title
            if(paper[2] != None):
                self.paper_grid.SetCellValue(i, 1, str(paper[2]))  # Year

            authors = ""
            clfs = ""
            affs = ""
            if(p.authors(paper[0]) != None or p.authors(paper[0]) != []):
                for author in p.authors(paper[0]):
                    authors += author[1] + "; "
                self.paper_grid.SetCellValue(i, 2, authors)  # Author
            if(p.classifications(paper[0]) != None or p.classifications(paper[0]) != []):
                for clf in p.classifications(paper[0]):
                    clfs += clf[1] + "; "
            self.paper_grid.SetCellValue(i, 3, clfs)  # Classification
            if(p.affiliations(paper[0]) != None or p.affiliations(paper[0]) != []):
                for aff in p.affiliations(paper[0]):
                    affs += aff[1] + "; "
            self.paper_grid.SetCellValue(i, 4, affs)  # Affiliationn
            self.paper_grid.SetCellValue(i, 5, paper[8])
            self.paper_grid.SetCellValue(i, 6, paper[9])

    def registerPaper(self, event):  # wxGlade: RposMain.<event_handler>
        self.RegisterPaper = RegisterPaper(self, wx.ID_ANY, self.db)
        self.RegisterPaper.Show()

    def showPaper(self, event):  # wxGlade: RposMain.<event_handler>
        self.ShowPaper = ShowPaper(self, wx.ID_ANY, self.db)
        self.ShowPaper.Show()

    def editPaper(self, event):
        self.EditPaper = EditPaper(self, wx.ID_ANY, self.db)  # params : database name
        self.EditPaper.Show()

    def deletePaper(self, event):
        msg = wx.MessageBox(u'削除しますか', u'Paper Delete', wx.YES_NO | wx.NO_DEFAULT | wx.ICON_WARNING)
        if(msg == wx.NO):
            return

        #--- Delete File ---#
        if(self.selected_paper[3] != None):
            if(os.path.isfile(self.selected_paper[3])):
                try:
                    os.remove(self.selected_paper[3])
                except PermissionError:
                    wx.MessageBox(u'ファイルを削除できません\n削除処理を中断しました', u'Could not Delete', wx.ICON_ERROR)
                    return
        p = Paper(self.db)
        p.delete(self.selected_paper[0])

        # --- Delete Relation to Author ---$
        a_m = AuthorManagement(self.db)
        authors_man = a_m.where(paper_id=self.selected_paper[0])
        for author_man in authors_man:
            a_m.deleteByID(author_man[0])

        #--- Delete Relation to Classification ---#
        c_m = ClassificationManagement(self.db)
        clfs_man = c_m.where(paper_id=self.selected_paper[0])
        for clf_man in clfs_man:
            c_m.deleteByID(clf_man[0])

        #--- Delete Relation to Affiliation ---#
        af_m = AffiliationManagement(self.db)
        affs_man = af_m.where(paper_id=self.selected_paper[0])
        for aff_man in affs_man:
            af_m.deleteByID(aff_man[0])

        #--- Update Paper Grid ---#
        self.paper_grid.DeleteRows(self.row, 1)

    def paperFileOpen(self, event):
        filepath = self.selected_paper[3]
        if(filepath != None and os.path.isfile(filepath)):
            if(" " in filepath):
                os.system('"' + filepath + '"')
            else:
                subprocess.Popen(['start', filepath], shell=True)
        else:
            msg = wx.MessageBox(u'ファイルが存在しません', u'File Not Found', wx.ICON_ERROR)

    def paperCopyBibtex(self, event):
        pyperclip.copy(self.selected_paper[4])

    def narrowPaper(self, event):  # wxGlade: RposMain.<event_handler>
        narTitle = self.narTitle_txtCtrl.GetValue()
        narAuthor = self.narAuthor_txtCtrl.GetValue()
        narClf = self.narClf_cmb.GetValue()
        narAff = self.narAff_cmb.GetValue()
        narRead = self.narRead_cmb.GetValue()
        p = Paper(self.db)
        papers = p.All()
        if(narTitle != "" or narAuthor != "" or narClf != "" or narAff != "" or narRead != ""):
            if(narTitle != "" or narRead != ""):
                papers = set(papers) & set(self.narrowTitleAndRead(narTitle, narRead))
            if(narAuthor != ""):
                papers = set(papers) & set(self.narrowAuthor(narAuthor))
            if(narClf != ""):
                papers = set(papers) & set(self.narrowClf(narClf))
            if(narAff != ""):
                papers = set(papers) & set(self.narrowAff(narAff))
            papers = list(papers)

        #--- sort ---#
        if(self.pgrid_title_state == 1):
            papers = sorted(papers, key=lambda x: x[1], reverse=True)
        elif(self.pgrid_title_state == 2):
            papers = sorted(papers, key=lambda x: x[1], reverse=False)
        elif(self.pgrid_year_state == 1):
            papers = sorted(papers, key=lambda x: x[2], reverse=True)
        elif(self.pgrid_year_state == 2):
            papers = sorted(papers, key=lambda x: x[2], reverse=False)
        elif(self.pgrid_register_state == 1):
            papers = sorted(papers, key=lambda x: x[8], reverse=True)
        elif(self.pgrid_register_state == 2):
            papers = sorted(papers, key=lambda x: x[8], reverse=False)
        elif(self.pgrid_update_state == 1):
            papers = sorted(papers, key=lambda x: x[9], reverse=True)
        elif(self.pgrid_update_state == 2):
            papers = sorted(papers, key=lambda x: x[9], reverse=False)
        self.indexPaper(papers)

    ###--- Author --- ###
    def indexAuthor(self, authors):
        if(self.author_grid.GetNumberRows() != 0):
            self.author_grid.DeleteRows(0, self.author_grid.GetNumberRows(), True)
        if(authors == []):
            return
        for i, author in enumerate(authors):
            a = Author(self.db)
            papers = a.papers(author[0])
            af = Affiliation(self.db)
            aff = af.find(author[3]) if(author[3] != None) else ["", ""]
            self.author_grid.AppendRows()
            self.author_grid.SetCellValue(i, 0, author[1])
            self.author_grid.SetCellValue(i, 1, aff[1])
            self.author_grid.SetCellValue(i, 2, str(len(papers)))
            self.author_grid.SetCellValue(i, 3, author[2] if(author[2] != None) else "")

    def registerAuthor(self, event):  # wxGlade: RposMain.<event_handler>
        event.Skip()

    def showAuthor(self, event):
        self.showAuthor = ShowAuthor(self, wx.ID_ANY, self.db)
        self.showAuthor.Show()

    def editAuthor(self, event):
        self.EditAuthor = EditAuthor(self, wx.ID_ANY, self.db)
        self.EditAuthor.Show()

    def deleteAuthor(self, event):
        msg = wx.MessageBox(u'削除しますか', u'Paper Delete', wx.YES_NO | wx.NO_DEFAULT | wx.ICON_ERROR)
        if(msg == wx.NO):
            return

        #--- Delete Author ---#
        a = Author(self.db)
        a.delete(self.selected_author[0])

        # --- Delete Relation to Paper ---$
        a_m = AuthorManagement(self.db)
        authors_man = a_m.where(author_id=self.selected_author[0])
        for author_man in authors_man:
            a_m.deleteByID(author_man[0])

        #--- Update Grids ---#
        p = Paper(self.db)
        self.indexPaper(p.All())
        self.author_grid.DeleteRows(self.row, 1)

    ###--- Classification ---###
    def registerClassification(self, event):  # wxGlade: RposMain.<event_handler>

        self.createClf = RegisterClassification(self, wx.ID_ANY, self.db)
        self.createClf.Show()

    def indexClassifications(self, c, clfs):
        c = Classification(self.db)
        if(clfs == []):
            return
        clfs = sorted(clfs, key=lambda x: x[3], reverse=False)
        self.clf_treectrl.DeleteAllItems()
        root = self.clf_treectrl.AddRoot("Classifications")
        for clf in clfs:
            parentclfs = c.parentclasses(clf[0])
            if(parentclfs == []):  # Show Only Top Classification
                self.getAndShowSubClf(c, root, clf)  # Recursive Function
        self.clf_treectrl.Expand(root)

    def showClassification(self, event):
        pass

    def editClassification(self, event):
        self.editClf = EditClassification(self, wx.ID_ANY, self.db)
        self.editClf.Show()

    def deleteClassification(self, event):
        msg = wx.MessageBox(u'削除しますか', u'Classification Delete', wx.YES_NO | wx.NO_DEFAULT | wx.ICON_ERROR)
        if(msg == wx.NO):
            return
        c = Classification(self.db)
        c.delete(self.selected_clf[0])

        #--- Delete Relation to Paper ---#
        c_m = ClassificationManagement(self.db)
        clfs_man = c_m.where(classification_id=self.selected_clf[0])
        for clf_man in clfs_man:
            c_m.deleteByID(clf_man[0])

        #--- Delete Relation to Classification Label ---#
        cl_m = ClassificationLabelManagement(self.db)
        clfs_l_man = cl_m.where(sub_classification_id=self.selected_clf[0])
        for clf_l_man in clfs_l_man:
            cl_m.deleteByID(clf_l_man[0])

        #--- Update TreeCtrl and Combox ---#
        self.indexClassifications(c, c.All())
        self.SetClfSelection()

    def narrowClassification(self, event):
        if(self.selected_clf == 'All'):
            p = Paper(self.db)
            papers = p.All()
        else:
            c = Classification(self.db)
            papers = c.papers(self.selected_clf[0])
            self.narClf_cmb.SetStringSelection(self.selected_clf[1])
        self.indexPaper(papers)

    def getAndShowSubClf(self, c, parent, clf):
        """Get sub classification and show

        Args:
            c : Classification Class
            parent : parent class
            clf : classification
        """
        subclfs = c.subclasses(clf[0])
        subclfs = sorted(subclfs, key=lambda x: x[3], reverse=False)
        item = self.clf_treectrl.AppendItem(parent, clf[1])
        for subclf in subclfs:
            self.getAndShowSubClf(c, item, subclf)
        self.clf_treectrl.Expand(item)

    def SetClfSelection(self):
        c = Classification(self.db)
        clfs = c.All()
        clfs = sorted(clfs, key=lambda x: x[3], reverse=False)
        self.narClf_cmb.Clear()
        for clf in clfs:
            self.narClf_cmb.Append(clf[1])

    ###--- Affiliation ---###
    def indexAffiliation(self, affiliations):
        if(affiliations == []):
            return
        self.affiliation_grid.DeleteRows(0, self.affiliation_grid.GetNumberRows(), True)
        for i, affiliation in enumerate(affiliations):
            self.affiliation_grid.AppendRows()
            self.affiliation_grid.SetCellValue(i, 0, affiliation[1])
            self.affiliation_grid.SetCellValue(i, 1, affiliation[3])

    def registerAffiliation(self, event):  # wxGlade: RposMain.<event_handler>

        registeraffiliation = RegisterAffiliation(self, wx.ID_ANY, self.db)
        registeraffiliation.Show()

    def showAffiliation(self, event):
        pass

    def editAffiliation(self, event):
        pass

    def deleteAffiliation(self, event):
        msg = wx.MessageBox(u'削除しますか', u'Paper Delete', wx.YES_NO | wx.NO_DEFAULT | wx.ICON_ERROR)
        if(msg == wx.NO):
            return
        af = Affiliation(self.db)
        af.delete(self.selected_aff[0])
        self.indexAffiliation(af.All())

        #--- Delete Relation to Paper ---#
        af_m = AffiliationManagement(self.db)
        affs_man = af_m.where(affiliation_id=self.selected_aff[0])
        for aff_man in affs_man:
            af_m.deleteByID(aff_man[0])

    ###--- Event ---###
    def pGrid_leftClick(self, event):  # wxGlade: RposMain.<event_handler>

        self.selectedPaper = self.paper_grid.GetSelectedCells()
        pass

    def pGrid_dLeftClick(self, event):  # wxGlade: RposMain.<event_handler>

        row = event.GetRow()
        selected_paper_title = self.paper_grid.GetCellValue(row, 0)
        p = Paper(self.db)
        selected_papers = p.where(title=selected_paper_title)
        self.selected_paper = selected_papers[0]
        self.paperFileOpen(event)

    def pGrid_rightClick(self, event):  # wxGlade: RposMain.<event_handler>
        #--- Extract selected Paper ---#
        self.row = event.GetRow()
        selected_paper_title = self.paper_grid.GetCellValue(self.row, 0)
        p = Paper(self.db)
        selected_papers = p.where(title=selected_paper_title)
        self.selected_paper = selected_papers[0]

        #--- Configure Menu ---#
        menu = wx.Menu()
        popupRegister = menu.Append(-1, 'Register New Paper')
        popupOpen = menu.Append(-1, 'Open PDF File')
        popupCopy = menu.Append(-1, 'Copy Bibtex')
        popupShow = menu.Append(-1, 'Show')
        popupEdit = menu.Append(-1, 'Edit')
        popupDelete = menu.Append(-1, 'Delete')
        self.Bind(wx.EVT_MENU, self.registerPaper, popupRegister)
        self.Bind(wx.EVT_MENU, self.paperFileOpen, popupOpen)
        self.Bind(wx.EVT_MENU, self.paperCopyBibtex, popupCopy)
        self.Bind(wx.EVT_MENU, self.showPaper, popupShow)
        self.Bind(wx.EVT_MENU, self.editPaper, popupEdit)
        self.Bind(wx.EVT_MENU, self.deletePaper, popupDelete)
        self.paper_grid.PopupMenu(menu)
        menu.Destroy()

    def aGrid_leftClick(self, event):  # wxGlade: RposMain.<event_handler>
        event.Skip()

    def aGrid_rightClick(self, event):  # wxGlade: RposMain.<event_handler>
        self.row = event.GetRow()
        selected_author_name = self.author_grid.GetCellValue(self.row, 0)
        a = Author(self.db)
        selected_authors = a.where(name=selected_author_name)
        self.selected_author = selected_authors[0]

        #--- Configure Menu ---#
        menu = wx.Menu()
        popupRegister = menu.Append(-1, 'Register New Author')
        popupShow = menu.Append(-1, 'Show')
        popupEdit = menu.Append(-1, 'Edit')
        popupDelete = menu.Append(-1, 'Delete')
        self.Bind(wx.EVT_MENU, self.registerAuthor, popupRegister)
        self.Bind(wx.EVT_MENU, self.showAuthor, popupShow)
        self.Bind(wx.EVT_MENU, self.editAuthor, popupEdit)
        self.Bind(wx.EVT_MENU, self.deleteAuthor, popupDelete)
        self.author_grid.PopupMenu(menu)
        menu.Destroy()

    def afGrid_rightClick(self, event):  # wxGlade: RposMain.<event_handler>

        row = event.GetRow()
        selected_aff_name = self.affiliation_grid.GetCellValue(row, 0)
        af = Affiliation(self.db)
        selected_affs = af.where(name=selected_aff_name)
        self.selected_aff = selected_affs[0]

        #--- Configure Menu ---#
        menu = wx.Menu()
        popupRegister = menu.Append(-1, 'Register New Affiliation')
        popupShow = menu.Append(-1, 'Show')
        popupEdit = menu.Append(-1, 'Edit')
        popupDelete = menu.Append(-1, 'Delete')
        self.Bind(wx.EVT_MENU, self.registerAffiliation, popupRegister)
        self.Bind(wx.EVT_MENU, self.showAffiliation, popupShow)
        self.Bind(wx.EVT_MENU, self.editAffiliation, popupEdit)
        self.Bind(wx.EVT_MENU, self.deleteAffiliation, popupDelete)
        self.affiliation_grid.PopupMenu(menu)
        menu.Destroy()

    def afGrid_leftClick(self, event):  # wxGlade: RposMain.<event_handler>
        event.Skip()

    def treeCtrl_rightClicked(self, event):  # wxGlade: RposMain.<event_handler>
        c = Classification(self.db)
        selected_classification = c.where(name=self.clf_treectrl.GetItemText(event.GetItem()))
        if(selected_classification == []):
            menu = wx.Menu()
            self.selected_clf = "All"
            popupRegister = menu.Append(-1, 'Register New Classification')
            popupNarrow = menu.Append(-1, 'Clear Narrowing')
            self.Bind(wx.EVT_MENU, self.registerClassification, popupRegister)
            self.Bind(wx.EVT_MENU, self.narrowClassification, popupNarrow)
        else:
            self.selected_clf = selected_classification[0]
            menu = wx.Menu()
            popupRegister = menu.Append(-1, 'Register New Classification')
            popupShow = menu.Append(-1, 'Show Detail')
            popupEdit = menu.Append(-1, 'Edit')
            popupDelete = menu.Append(-1, 'Delete')
            popupNarrow = menu.Append(-1, 'Narrow Down by this Classification')
            self.Bind(wx.EVT_MENU, self.registerClassification, popupRegister)
            self.Bind(wx.EVT_MENU, self.showClassification, popupShow)
            self.Bind(wx.EVT_MENU, self.editClassification, popupEdit)
            self.Bind(wx.EVT_MENU, self.deleteClassification, popupDelete)
            self.Bind(wx.EVT_MENU, self.narrowClassification, popupNarrow)
        self.paper_grid.PopupMenu(menu)
        menu.Destroy()

    def pgridLabelLeftClicked(self, event):  # wxGlade: RposMain.<event_handler>
        """Sort Grid

        Args:
            event
        """
        if(event.GetCol() == 1):
            self.pgrid_title_state = 0
            self.pgrid_register_state = 0
            self.pgrid_update_state = 0
            self.paper_grid.SetColLabelValue(0, "Title")
            self.paper_grid.SetColLabelValue(5, "Registered At")
            self.paper_grid.SetColLabelValue(6, "Updated At")
            if(self.pgrid_year_state == 0):
                self.paper_grid.SetColLabelValue(1, "Year↓")
                self.pgrid_year_state = 1
            elif(self.pgrid_year_state == 1):
                self.paper_grid.SetColLabelValue(1, "Year↑")
                self.pgrid_year_state = 2
            elif(self.pgrid_year_state == 2):
                self.paper_grid.SetColLabelValue(1, "Year")
                self.pgrid_year_state = 0
        elif(event.GetCol() == 0):
            self.pgrid_year_state = 0
            self.pgrid_register_state = 0
            self.paper_grid.SetColLabelValue(1, "Year")
            self.paper_grid.SetColLabelValue(5, "Registered At")
            if(self.pgrid_title_state == 0):
                self.paper_grid.SetColLabelValue(0, "Title↓")
                self.pgrid_title_state = 1
            elif(self.pgrid_title_state == 1):
                self.paper_grid.SetColLabelValue(0, "Title↑")
                self.pgrid_title_state = 2
            elif(self.pgrid_title_state == 2):
                self.paper_grid.SetColLabelValue(0, "Title")
                self.pgrid_title_state = 0
        elif(event.GetCol() == 5):
            self.pgrid_title_state = 0
            self.pgrid_year_state = 0
            self.pgrid_update_state = 0
            self.paper_grid.SetColLabelValue(0, "Title")
            self.paper_grid.SetColLabelValue(1, "Year")
            self.paper_grid.SetColLabelValue(6, "Updated At")
            if(self.pgrid_register_state == 0):
                self.paper_grid.SetColLabelValue(5, "Registered At↓")
                self.pgrid_register_state = 1
            elif(self.pgrid_register_state == 1):
                self.paper_grid.SetColLabelValue(5, "Registered At↑")
                self.pgrid_register_state = 2
            elif(self.pgrid_register_state == 2):
                self.paper_grid.SetColLabelValue(5, "Registered At")
                self.pgrid_register_state = 0
        elif(event.GetCol() == 6):
            self.pgrid_title_state = 0
            self.pgrid_year_state = 0
            self.pgrid_register_state = 0
            self.paper_grid.SetColLabelValue(0, "Title")
            self.paper_grid.SetColLabelValue(1, "Year")
            self.paper_grid.SetColLabelValue(5, "Registered At")
            if(self.pgrid_update_state == 0):
                self.paper_grid.SetColLabelValue(6, "Updated At↓")
                self.pgrid_update_state = 1
            elif(self.pgrid_update_state == 1):
                self.paper_grid.SetColLabelValue(6, "Updated At↑")
                self.pgrid_update_state = 2
            elif(self.pgrid_update_state == 2):
                self.paper_grid.SetColLabelValue(6, "Updated At")
                self.pgrid_update_state = 0
        else:
            return

        self.narrowPaper(event)

    def narrowTitleAndRead(self, narTitle, narRead):
        p = Paper(self.db)
        if(narRead == "Done"):
            isread = 1
        elif(narRead == "Not Yet"):
            isread = 0
        else:
            isread = None
        return p.where(title=narTitle, isread=isread)

    def narrowAuthor(self, narAuthor):
        a = Author(self.db)
        authors = a.where(name=narAuthor)
        papers = []
        for author in authors:
            for paper in a.papers(author[0]):
                if(paper == None):
                    continue
                papers.append(paper)
        return list(dict.fromkeys(papers))

    def narrowClf(self, clf):
        c = Classification(self.db)
        narClf = c.where(name=clf)
        return c.papers(narClf[0][0])

    def narrowAff(self, aff):
        af = Affiliation(self.db)
        narAff = af.where(name=aff)
        return af.papers(narAff[0][0])

    def resetNarrowing(self, event):  # wxGlade: RposMain.<event_handler>
        self.narTitle_txtCtrl.SetValue("")
        self.narAuthor_txtCtrl.SetValue("")
        self.narClf_cmb.SetSelection(-1)
        self.narAff_cmb.SetSelection(-1)
        self.narRead_cmb.SetSelection(-1)
        p = Paper(self.db)
        self.indexPaper(p.All())

    def exitProgram(self, event):  # wxGlade: RposMain.<event_handler>
        self.Destroy()

    def openDatabase(self, event):  # wxGlade: RposMain.<event_handler>
        welcomepage = WelcomePage(None, wx.ID_ANY, "")
        welcomepage.Show()

    def closeDatabase(self, event):  # wxGlade: RposMain.<event_handler>
        self.Close()
        welcomepage = WelcomePage(None, wx.ID_ANY, "")
        welcomepage.Show()
# end of class RposMain


class ClfListCtrl(wx.ListCtrl, listmix.CheckListCtrlMixin, listmix.ListCtrlAutoWidthMixin):
    def __init__(self, panel, style):
        # wx.ListCtrl.__init__(self, *args, **kwargs)
        wx.ListCtrl.__init__(self, panel, -1, style=wx.LC_REPORT | wx.SUNKEN_BORDER, size=wx.Size(395, 467), pos=wx.Point(10, 20))
        listmix.CheckListCtrlMixin.__init__(self)
        listmix.ListCtrlAutoWidthMixin.__init__(self)
        self.checkedItem = []

    def OnCheckItem(self, index, flag):
        if(flag == True):
            self.checkedItem.append(self.GetParent().GetParent().clfs[index][0])
        elif(flag == False):
            self.checkedItem.remove(self.GetParent().GetParent().clfs[index][0])


class AffListCtrl(wx.ListCtrl, listmix.CheckListCtrlMixin, listmix.ListCtrlAutoWidthMixin):
    def __init__(self, panel, style):
        # wx.ListCtrl.__init__(self, *args, **kwargs)
        wx.ListCtrl.__init__(self, panel, -1, style=wx.LC_REPORT | wx.SUNKEN_BORDER, size=wx.Size(395, 467), pos=wx.Point(10, 20))
        listmix.CheckListCtrlMixin.__init__(self)
        listmix.ListCtrlAutoWidthMixin.__init__(self)
        self.checkedItem = []

    def OnCheckItem(self, index, flag):
        if(flag == True):
            self.checkedItem.append(self.GetParent().GetParent().affs[index][0])
        elif(flag == False):
            self.checkedItem.remove(self.GetParent().GetParent().affs[index][0])


if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
